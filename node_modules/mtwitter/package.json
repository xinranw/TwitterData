{
  "name": "mtwitter",
  "version": "1.5.3",
  "description": "Node.js Twitter API",
  "keywords": [
    "twitter",
    "streaming",
    "oauth"
  ],
  "homepage": "https://passcod.name/mtwitter",
  "author": {
    "name": "Félix Saparelli",
    "email": "https://passcod.name"
  },
  "contributors": [
    {
      "name": "Masih Yeganeh",
      "email": "goodboy.php@gmail.com"
    },
    {
      "name": "Matthew Palmer",
      "email": "matt@palmer.im"
    },
    {
      "name": "Francisco F Reynolds",
      "email": "francisco@iamat.com"
    },
    {
      "name": "Félix Saparelli",
      "email": "me@passcod.name"
    }
  ],
  "licenses": {
    "type": "Public Domain",
    "url": "https://creativecommons.org/publicdomain/zero/1.0/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/passcod/mtwitter.git"
  },
  "dependencies": {
    "jape": "0.0.x",
    "fantail": "0.2.x",
    "readable-stream": "1.0.x",
    "pkginfo": "0.3.x",
    "request": "2.34.x",
    "underscore": "1.6.x"
  },
  "devDependencies": {
    "docco": "0.6.x",
    "jshint": "2.5.x",
    "mocha": "1.18.x"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./index",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec",
    "lint": "./node_modules/.bin/jshint --config=./jshint.json lib test",
    "doc": "./node_modules/.bin/docco -o doc lib/*.js index.js"
  },
  "readme": "Node.js Twitter API\n===================\n\n[![Build Status](https://travis-ci.org/passcod/mtwitter.png)](https://travis-ci.org/passcod/mtwitter)\n[![NPM version](https://badge.fury.io/js/mtwitter.png)](http://npmjs.org/package/mtwitter)\n[![Dependency Status](https://gemnasium.com/passcod/mtwitter.png)](https://gemnasium.com/passcod/mtwitter)\n\n<sub><sup>_Versioning_: Back to [semver](http://semver.org)!</sup></sub>\n\nInstantiation & Keys\n--------------------\n\n__mtwitter__ cannot currently help with obtaining access tokens from Twitter,\nyou'll have to do this yourself. For testing and simple apps, the keys can be\nobtained from [dev.twitter.com][b1] after [setting up a new App][b2].\n\n[b1]: https://dev.twitter.com\n[b2]: https://dev.twitter.com/apps/new\n\n``` javascript\nvar Twitter = require('mtwitter');\n```\n\n### Normal (client) authentication\n\n``` javascript\nvar twitter = new Twitter({\n  consumer_key: 'Twitter',\n  consumer_secret: 'API',\n  access_token_key: 'keys',\n  access_token_secret: 'go here'\n});\n```\n\n### App-only authentication\n\n``` javascript\nvar twitter = new Twitter({\n  consumer_key: config.key,\n  consumer_secret: config.secret,\n  application_only: true\n});\n```\n\n\nREST Interface\n--------------\n\nThe REST interface is fully managed, which means it (will) transparently handles\nrate-limiting (in a more intelligent fashion than just waiting 15 minutes\nwhen an HTTP 429 is hit), and also takes care of fetching and refreshing\nconfiguration data as recommended by Twitter.\n\n### Synopsis\n\n``` javascript\ntwitter.get(\n  '/statuses/mentions_timeline',\n  {key: 'value'},\nfunction logResponse(error, data, response) {\n  console.log('Error? ', error);\n  console.log('Parsed object of data: ', data);\n  console.log('Raw HTTP response: ', response);\n});\n\ntwitter.post(\n  '/favorites/create',      // URL. Don't use https:// ones\n  'id=317050755691454464',  // Body content (can be a string or hashmap)\n                            // Content-Type (omit to use default)\n  function() { ... }        // Callback has the same signature as above\n);\n```\n\n\n### Additional examples\n\n``` javascript\n// Get a user's timeline\ntwit.get('statuses/home_timeline', {screen_name: '_matthewpalmer'}, function(err, item) {\n  console.log(err, item);\n });\n\n// Search for a phrase\ntwit.get('search/tweets', {q: 'node.js'}, function(err, item) {\n  console.log(err, item);\n});\n\n// Post a new status\nvar content = {status: 'Maybe he\\'ll finally find his keys. /@peterfalk'};\ntwit.post('statuses/update', content, function(err, item) {\n  console.log(err, item);\n});\n```\n\nStreaming\n---------\n\nFor the moment, only \"raw\" access is available:\n\n```javascript\ntwit.stream.raw(\n  'GET',\n  'https://stream.twitter.com/1.1/statuses/sample.json',\n  {delimited: 'length'},\n  // The above arguments are as for .rest.queueRequest()\n  // i.e. the third argument has to be a {content: ...}\n  // for POST. The URL has to include https://...\n\n  process.stdout // Provide a stream to pipe to, here STDOUT\n);\n```\n\n\nCommunity & Contributions\n-------------------------\n\nOriginally forked from @AvianFlu's [inactive repo][c1],\nbut reworked heavily, taking inspiration from many people\nand their attempts at making it better. Old (pre-rewrite)\ncontributors can be found in `HISTORICAL`. Contributors to\nthe present iteration can be found in the [`package.json`][c2].\n\nLicense: Public Domain or [CC0][c0].  \nStyle guide: [passcod/node-style-guide][c3].  \nIRC Channel: __#mtwitter__ on [Freenode][c4].\n\n### Contributing\n\n_See `CONTRIBUTING.md` for details_\n\n - Topical branches and standard PR etiquette is preferred.\n - You need to formally agree to release your contribution.\n - Both linting and testing should pass (the Travis build will fail\n   a PR if there are linting errors):\n\n   ``` bash\n   $ npm test\n   $ npm run-script lint\n   ```\n\n[c0]: https://creativecommons.org/publicdomain/zero/1.0\n[c1]: https://github.com/AvianFlu/ntwitter\n[c2]: https://github.com/passcod/mtwitter/blob/master/package.json\n[c3]: https://github.com/passcod/node-style-guide\n[c4]: https://freenode.net",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/passcod/mtwitter/issues"
  },
  "_id": "mtwitter@1.5.3",
  "dist": {
    "shasum": "507f6391d78e2b5fb9ab383b03e2a70a67c30499"
  },
  "_from": "mtwitter@1.5.3",
  "_resolved": "https://registry.npmjs.org/mtwitter/-/mtwitter-1.5.3.tgz"
}
